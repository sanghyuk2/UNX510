******2.1 Redirection And Pipes

When Unix shell starts a command, it opens three connections(=standard file descriptors) for that command.

stdin(=Standard Input) - 0
stdout(=Standard Output) - 1
stderr(=Standard Error) - 2

ex) when you type 'date' command by keyboard(=standard input) then the output will be showing on the screen automatically (=standard output)

<Stdout>
> - overwritting the output to the file
>> - appending the output to the file

<Stdin>
< - redirect file into the input of the command 

tr - translate command, used when you want to translate the contetns of file to uppercase or lowercase
ex) tr "[a-z]" "[A-Z]" < caltest

If yo do not provide the file argument on the command-line then the input is taken from stdin
ex) cat < caltest === cat caltest

<stderr>
2> file - overwrite 
2>> file - appends

<Pipe>
able to connect standard outut to standard input
ex) cal 2020 | grep er

<Putting it All together>
Rules to remember:
1. Redirection only connects commands to files
ex) cal -y > today will works but cat -y > sort -n will not work
2. Pipes only work between commands (|)
3. Data goes into the left side of a pipe and flows out the right side
a | b | c - stdout of command 'a' is connected to the stdin of 'b' and the stdout of 'b' is connected to the stdin of 'c'
ex) a < inputfile | b | c works but a | b | c < inputfile will not work because the command shows the stdin of 'c' connected to both 'inputfile' and the stdout of 'b'

******Lab 2.2 Permissions
<File Permissions> 
User (= 'u') - the file's owner, by default a file is owned by the person that created it but it can be changed by using a 'chown' command.
Group (= 'g') - the file's group, every user of unix system is in a 'group' but can be changed by using a 'chgrp' command.
Other (= 'o') - all other users of the system

id - command that shows the id number of user and group

r(= Read) - value of 4
Read permission means that a community may read a file. For directories, this means permission to list the filename in the directory.
w(= Write) - value of 2
Write permission means taht a particular community may place information in a file or change information that is already in a file (delete, modify, overwrite).
In the case of directory, this is permission to add, rename, or delete files listed in that directory.
x(= Execute) - value of 1
Execute permission permits a file to be run, if it is a program or script. For directories, this permission is sometimes called Search or Passthrough, and it allows files in the directory to be accessed.

Symbolic representation
ex) rw-rw-rw-

Octal Notation
as r is 4 w is 2 x is 1, rwxr-x--x is represented as 751

<Setting Permissions>
chmod - setting permissions
ex) chomod permission file-list

chmod's Symbolic Mode
communities (u,g,o, or a for all), operation( to remove + to add, = to set), permissions(r,w, or x)
ex) to add read permission for 'Other' for the file 'file1', you would write:
chmod o+r file1
to add read and write permission for everyone:
chmod ugo+rw file1 or chomd a+rw file1
to remove read permission for the Group:
chmod g-r file1
to set the User permission to rw:
chmod u=rw file1
to add read permission for User and remove read for Group and Other:
chmod u+r,go-r file1
to add read and execute permission for everyone and remove write permission for Other:
chmod a+rw,o-w file1

<using umask to limit permissions on new files>
umask - command that limits(restricts) the permissions of the newly created file, not the existing files.
so when you type umask 027 and create a new file testing, the permissions on testing is rw-r-----

<Environment Variables>
reduce the amount of typing by enabling some information to be sorted in "Environment Varaibles", which are passed to all child processes.
Every process receives environment variables from its parent, and every process passes environment variables to processes that its starts(the child processes).

env - to view all of my shell's current environment variables
set - to see all variables

HOME - contains your home directory
MAIL - specifies where your e-mail mailbox file is located
PATH - tells the system which directories to search for commands. So once you set the PATH=/ then ls cannot be found. PATH has been automatically reset for you.
PS1 - sets your primary shell promt
TERM - tells programs what type of terminal you're using

Let's say we have assigned '5' to variable Foo, Foo=5
but yet it is not an environment variable because it is a shell variable accessible only by your shell.
To make it into an environment variable, we must 'export' it so that child processes receives its value.
To remove it from environment variable, we can use 'unset'

$(in front of the variable) - retrieving the variable value.
We can also combine retrieving a variable with assigning the value to a variable 
ex) PATH="$PATH:/sbin"

<Variable Assignment & Quoting>
If we do have spaces between the value and the equal sign and the variable, then the shell misinterprets 'city' as a command.

both single quotation(') and double quotation(") works similar.
double quotation(") is known as weak quotes because they allow variables to be substituted by their values.
Single quotes(') is called strong quotes. Opposite reason to double quotes.

<Command Substitution>
takes the output of a command and treats it as a character string
older form is using backquotes(`)
ex) echo "My user name is `whoami`"
newer form is using dollar sign($) and it allows nesting of command substitution.
ex) echo "My user name is $(whoami)"
username=$(whoami)

<Using the alias command>
alias - command that is used to give a command a different name
ex) alias display=echo - In this case, whenever the shell finds a 'display' command, it will substitute the 'echo' command
analias - remove the name used

alias - can also be used to add options or arguments to a command
ex) alias mkdir='mkdir -p' or alias md='mkdir -p'

<Variables>
Positional parameters are available as the variables $1, $2, $3, and so on.
ex) if we write a script call 'script1' and call is as follows:
script1 Toronto Brampton 'North York'
$1 is the string 'Toronto', $2 has the value 'Brampton', $3 has the value 'North York'

$* - represents all of the positional parameters as a single string, with the parameter seperated by a single space.
$@ - represents all of the positional parameters as separate string. The difference between $* and $@ will be easier to show when looping is discussed.
$# - represents the number of positional parameters.

shift - shifts all of the positional parameters by one position. The value of the first positional parameters disappears, so that $1 has the value of the second positional parameters, and so forth.

$$ - contains the process id number, or PID, of the current process.
$? - contains the 'exit status'(indication of the success or failure of a command) of the last command that was executed. 0 indicates success, non-zero indicates failure.

Lab2.5: Characters
<Regular Expressions Using grep>
Regular expressions ARE NOT THE SAME as Ambiguous filenames. Although both are used to match patterns, they cannot be swapped, and they use the same symbols to mean different things.
Regular expressions - text search patterns.
1. Characters and Character Classes
2. Wildcard
3. Repetition
4. Anchors


<Characters>
grep -i - ignore UPPER and lower-case

\ - remove the special meaning 

[] does the same thing as we did, character class matches only ONE character.
ex) grep "M[rs] " names

<Wildcard>
. - will match any one character

<Repetition> 
* - the pattern should match the previous character zero or more times. 
ex) grep "wo*l" names
output: Bewlite, Beswol, Sheepwool

<Anchors>
^ - anchor to the start of the line
$ - anchor to the end of the line

<sed and awk>
sed(stream editor) - used to change (edit) a file non-destructively. In other words, it will send the changed file to standard output, but the original file is left unchanged.

sed 'pattern' d - deletes the pattern
sed –n ‘5 p’ filename - display only the fifth line in the file
sed ‘s/Jam/Marmalade/g’ inventory - Display all of the lines in the file, changing the characters "Jam" to "Marmalade", using sed.
g option in the end stands for globally so that changing all if you don't then it will change each of the line.

awk - superset of the C programming language. can make substantial changes to a file, and like set, it will send the changed file to stdout, but the original file is left changed.